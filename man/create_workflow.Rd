% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_generator.R
\name{create_workflow}
\alias{create_workflow}
\title{Create Workflow Script}
\usage{
create_workflow(
  file_path = paste0("workflow_", format(Sys.time(), "\%Y\%m\%d_\%H\%M"), ".R"),
  output_dir = "./Outputs",
  libraries = "",
  query = "",
  data_management = "",
  analysis = "",
  model_results = "",
  logging = TRUE
)
}
\arguments{
\item{file_path}{A character string specifying the file path where the workflow script will be saved. Timestamp is added to prevent overwritten.}

\item{libraries}{A character string containing R library calls.}

\item{query}{A character string containing an SQL query to execute. The query is automatically processed using `sqlite2oracle` for Oracle compatibility.}

\item{data_management}{A character string with data preprocessing and management steps.}

\item{analysis}{A character string with data analysis steps.}

\item{model_results}{A character string containing code to process and export model results.}

\item{logging}{A boolen value where the user can decide if there should be logging in the complete workflow file. The logging consist of the `sink` function and the `compute_time_limit` function.}
}
\value{
None. The function writes the generated workflow script to the specified file path and outputs a message with the location of the created script.
}
\description{
This function generates a complete R workflow script for use with NHS data pipelines. It compiles code chunks for library setup, query execution, data management, analysis, and model results into a single script.
}
\details{
The `create_workflow` function accepts chunks of code as input parameters, processes them, and integrates them into a predefined workflow template. The template includes sections for library setup, database connections, querying, data management, analysis, and result handling. The generated script also contains time monitoring to evaluate the total execution time to ensure it is within the three hour limit of the servers at NHS.

The `sqlite2oracle` function is used to convert SQL queries from SQLite syntax to Oracle syntax.
}
\examples{
# Generate a workflow script with minimal input
create_workflow(
  libraries = "library(dplyr)",
  query = "SELECT * FROM sim_av_patients LIMIT age > 50;",
  data_management = "df <- cancer_grouping(df)",
  analysis = "model <- glm(Y ~ x1 + x2 + x3, data=df",
  model_results = "write.csv(model, 'results.csv')"
)
}
