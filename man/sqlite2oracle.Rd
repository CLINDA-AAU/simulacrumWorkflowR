% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sqlite2oracle.R
\name{sqlite2oracle}
\alias{sqlite2oracle}
\title{Translate SQLite to Oracle-Compatible Queries}
\usage{
sqlite2oracle(query)
}
\arguments{
\item{query}{A string containing the SQLite query to be translated.}
}
\value{
A string containing the translated Oracle-compatible query.
}
\description{
This functions take a string as input, which is a SQLite query and transform it into a Oracle compatible query string
}
\details{
This function takes a string as input, which are suppose to be the queries from the SQLite database interaction. 
The function have two parts.

1) It takes the keywords used in SQL queries and make sure they are upper. 
This is due to Oracle being strict to the keywords being upper whereas SQLite can take both upper and lower letters

2) Transform the keyword `LIMIT` into the keyword `ROWNUM <=`
There is added a if statement which will add `WHERE` in front of `ROWNUM` is there is no where in the query input.
If there is a `WHERE` in the input query, `AND` will be incerted in front of `ROWNUM`

Please note that there are a more two simple and common query corrections in the code. 
There are a lot more differencies between the queries of SQLite and Oracle. 
However, the purpose of this package is merely to write as little sql as possible and keep the data management in R.
This function is not consider as a necessity for the advantage database user, as they are likely to know the difference on their own.

If more query translation could be beneficial, we welcome pull requests!
}
\examples{
sqlite_query <- "select * from sim_av_patient where age > 50 limit 500;"
oracle_query <- sqlite2oracle(sqlite_query)
}
