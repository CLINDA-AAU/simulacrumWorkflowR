Function: function() {
Elapsed time:  seconds
 Function:     required_files <- c("sim_av_gene.csv", "sim_av_patient.csv", 
Elapsed time:  seconds
 Function:         "sim_av_tumour.csv", "sim_rtds_combined.csv", "sim_rtds_episode.csv", 
Elapsed time:  seconds
 Function:         "sim_rtds_exposure.csv", "sim_rtds_prescription.csv", 
Elapsed time:  seconds
 Function:         "sim_sact_cycle.csv", "sim_sact_drug_detail.csv", "sim_sact_outcome.csv", 
Elapsed time:  seconds
 Function:         "sim_sact_regimen.csv")
Elapsed time:  seconds
 Function:     if (!is.character(dir)) 
Elapsed time:  seconds
 Function:         stop("Please make sure the input dir is a string.")
Elapsed time:  seconds
 Function:     if (!dir.exists(dir)) 
Elapsed time:  seconds
 Function:         stop("Directory does not exist. Please check the path.")
Elapsed time:  seconds
 Function:     all_csv_files <- list.files(dir, pattern = "\\.csv$", full.names = TRUE)
Elapsed time:  seconds
 Function:     available_files <- basename(all_csv_files)
Elapsed time:  seconds
 Function:     missing_files <- setdiff(required_files, available_files)
Elapsed time:  seconds
 Function:     if (length(missing_files) > 0) {
Elapsed time:  seconds
 Function:         stop("Missing required files: ", paste(missing_files, 
Elapsed time:  seconds
 Function:             collapse = ", "))
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     files_to_read <- if (is.null(selected_files)) {
Elapsed time:  seconds
 Function:         all_csv_files[basename(all_csv_files) %in% required_files]
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     else {
Elapsed time:  seconds
 Function:         matched_files <- paste0(selected_files, ".csv")
Elapsed time:  seconds
 Function:         files <- all_csv_files[basename(all_csv_files) %in% matched_files]
Elapsed time:  seconds
 Function:         if (length(files) == 0) 
Elapsed time:  seconds
 Function:             stop("No matching files found for selected files.")
Elapsed time:  seconds
 Function:         files
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     data_list <- pbapply::pblapply(files_to_read, function(file) {
Elapsed time:  seconds
 Function:         table_name <- tools::file_path_sans_ext(basename(file))
Elapsed time:  seconds
 Function:         message(sprintf("Reading: %s", table_name))
Elapsed time:  seconds
 Function:         read.csv(file, stringsAsFactors = FALSE)
Elapsed time:  seconds
 Function:     })
Elapsed time:  seconds
 Function:     names(data_list) <- tools::file_path_sans_ext(basename(files_to_read))
Elapsed time:  seconds
 Function:     message("Files successfully loaded!")
Elapsed time:  seconds
 Function:     return(data_list)
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
Function: function() {
Elapsed time:  seconds
 Function:     if (!is.character(query)) 
Elapsed time:  seconds
 Function:         stop("Please make sure input query is a string")
Elapsed time:  seconds
 Function:     keywords <- c("SELECT", "FROM", "WHERE", "INNER", "OUTER", 
Elapsed time:  seconds
 Function:         "JOIN", "RIGHT", "LEFT", "ORDER BY", "GROUP BY", "HAVING")
Elapsed time:  seconds
 Function:     for (keyword in keywords) {
Elapsed time:  seconds
 Function:         query <- gsub(keyword, toupper(keyword), query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     chech_for_where <- grepl("\\bWHERE\\b", query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     if (chech_for_where) {
Elapsed time:  seconds
 Function:         query <- gsub("LIMIT\\s+(\\d+)", "AND ROWNUM <= \\1", 
Elapsed time:  seconds
 Function:             query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     else {
Elapsed time:  seconds
 Function:         query <- gsub("LIMIT\\s+(\\d+)", "WHERE ROWNUM <= \\1", 
Elapsed time:  seconds
 Function:             query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     query <- trimws(query)
Elapsed time:  seconds
 Function:     if (!grepl(";$", query)) {
Elapsed time:  seconds
 Function:         query <- paste0(query, ";")
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     return(query)
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
Function: function() {
Elapsed time:  seconds
 Function:     if (!is.character(query)) 
Elapsed time:  seconds
 Function:         stop("Please make sure input query is a string")
Elapsed time:  seconds
 Function:     keywords <- c("SELECT", "FROM", "WHERE", "INNER", "OUTER", 
Elapsed time:  seconds
 Function:         "JOIN", "RIGHT", "LEFT", "ORDER BY", "GROUP BY", "HAVING")
Elapsed time:  seconds
 Function:     for (keyword in keywords) {
Elapsed time:  seconds
 Function:         query <- gsub(keyword, toupper(keyword), query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     chech_for_where <- grepl("\\bWHERE\\b", query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     if (chech_for_where) {
Elapsed time:  seconds
 Function:         query <- gsub("LIMIT\\s+(\\d+)", "AND ROWNUM <= \\1", 
Elapsed time:  seconds
 Function:             query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     else {
Elapsed time:  seconds
 Function:         query <- gsub("LIMIT\\s+(\\d+)", "WHERE ROWNUM <= \\1", 
Elapsed time:  seconds
 Function:             query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     query <- trimws(query)
Elapsed time:  seconds
 Function:     if (!grepl(";$", query)) {
Elapsed time:  seconds
 Function:         query <- paste0(query, ";")
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     return(query)
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
Function: function() {
Elapsed time:  seconds
 Function:     clean_chunk <- function(chunk) {
Elapsed time:  seconds
 Function:         if (is.null(chunk) || chunk == "") 
Elapsed time:  seconds
 Function:             return("")
Elapsed time:  seconds
 Function:         cleaned_lines <- trimws(strsplit(chunk, "\n")[[1]])
Elapsed time:  seconds
 Function:         cleaned_lines <- cleaned_lines[cleaned_lines != ""]
Elapsed time:  seconds
 Function:         paste(cleaned_lines, collapse = "\n")
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     libraries <- clean_chunk(libraries)
Elapsed time:  seconds
 Function:     query <- clean_chunk(query)
Elapsed time:  seconds
 Function:     data_management <- clean_chunk(data_management)
Elapsed time:  seconds
 Function:     analysis <- clean_chunk(analysis)
Elapsed time:  seconds
 Function:     model_results <- clean_chunk(model_results)
Elapsed time:  seconds
 Function:     if (query != "") {
Elapsed time:  seconds
 Function:         query <- sqlite2oracle(query)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     workflow_template <- "\nstart <- Sys.time()\nlog_func(function() {\n# Libraries ----------------------------------------------------------\nlibrary(knitr)\nlibrary(DBI)\nlibrary(odbc)\n{LIBRARIES}\n\n# ODBC --------------------------------------------------------------------\nmy_oracle <- dbConnect(odbc::odbc(),\n                       Driver = \"\",\n                       DBQ = \"\", \n                       UID = \"\",\n                       PWD = \"\",\n                       trusted_connection = TRUE)\n\n# Query ----------------------------------------------------------\nquery1 <- \"{QUERY}\"\ndata <- dbGetQuery(my_oracle, query1)\n\n# Data Management ----------------------------------------------------------\n{DATA_MANAGEMENT}\n\n# Analysis ----------------------------------------------------------\n{ANALYSIS}\n\n# Model Results ----------------------------------------------------------\n{MODEL_RESULTS}\n\nend <- Sys.time()\ncompute_time_limit(start, end)\n  })\n  "
Elapsed time:  seconds
 Function:     workflow_content <- workflow_template
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{LIBRARIES\\}", libraries, workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{QUERY\\}", query, workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{DATA_MANAGEMENT\\}", data_management, 
Elapsed time:  seconds
 Function:         workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{ANALYSIS\\}", analysis, workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{MODEL_RESULTS\\}", model_results, 
Elapsed time:  seconds
 Function:         workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\n{3,}", "\n\n", workflow_content)
Elapsed time:  seconds
 Function:     writeLines(workflow_content, file_path)
Elapsed time:  seconds
 Function:     message("Workflow script created at: ", file_path)
Elapsed time:  seconds
 Function:     message("The workflow script is designed for execution on National Health Service (NHS). Local execution of this script is likely to fail due to its dependency on a database connection. The goal of this package is to generate a workflow file compatible with the NHS server environment, which eliminates the need for local database configuration. Assuming successful execution of all local operations, including library imports, data queries, data management procedures, analyses, and file saving, the generated workflow is expected to function correctly within the NHS server environment.")
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
Function: function() {
Elapsed time:  seconds
 Function:     required_files <- c("sim_av_gene.csv", "sim_av_patient.csv", 
Elapsed time:  seconds
 Function:         "sim_av_tumour.csv", "sim_rtds_combined.csv", "sim_rtds_episode.csv", 
Elapsed time:  seconds
 Function:         "sim_rtds_exposure.csv", "sim_rtds_prescription.csv", 
Elapsed time:  seconds
 Function:         "sim_sact_cycle.csv", "sim_sact_drug_detail.csv", "sim_sact_outcome.csv", 
Elapsed time:  seconds
 Function:         "sim_sact_regimen.csv")
Elapsed time:  seconds
 Function:     if (!is.character(dir)) 
Elapsed time:  seconds
 Function:         stop("Please make sure the input dir is a string.")
Elapsed time:  seconds
 Function:     if (!dir.exists(dir)) 
Elapsed time:  seconds
 Function:         stop("Directory does not exist. Please check the path.")
Elapsed time:  seconds
 Function:     all_csv_files <- list.files(dir, pattern = "\\.csv$", full.names = TRUE)
Elapsed time:  seconds
 Function:     available_files <- basename(all_csv_files)
Elapsed time:  seconds
 Function:     missing_files <- setdiff(required_files, available_files)
Elapsed time:  seconds
 Function:     if (length(missing_files) > 0) {
Elapsed time:  seconds
 Function:         stop("Missing required files: ", paste(missing_files, 
Elapsed time:  seconds
 Function:             collapse = ", "))
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     files_to_read <- if (is.null(selected_files)) {
Elapsed time:  seconds
 Function:         all_csv_files[basename(all_csv_files) %in% required_files]
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     else {
Elapsed time:  seconds
 Function:         matched_files <- paste0(selected_files, ".csv")
Elapsed time:  seconds
 Function:         files <- all_csv_files[basename(all_csv_files) %in% matched_files]
Elapsed time:  seconds
 Function:         if (length(files) == 0) 
Elapsed time:  seconds
 Function:             stop("No matching files found for selected files.")
Elapsed time:  seconds
 Function:         files
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     data_list <- pbapply::pblapply(files_to_read, function(file) {
Elapsed time:  seconds
 Function:         table_name <- tools::file_path_sans_ext(basename(file))
Elapsed time:  seconds
 Function:         message(sprintf("Reading: %s", table_name))
Elapsed time:  seconds
 Function:         read.csv(file, stringsAsFactors = FALSE)
Elapsed time:  seconds
 Function:     })
Elapsed time:  seconds
 Function:     names(data_list) <- tools::file_path_sans_ext(basename(files_to_read))
Elapsed time:  seconds
 Function:     message("Files successfully loaded!")
Elapsed time:  seconds
 Function:     return(data_list)
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
Function: function() {
Elapsed time:  seconds
 Function:     required_files <- c("sim_av_gene.csv", "sim_av_patient.csv", 
Elapsed time:  seconds
 Function:         "sim_av_tumour.csv", "sim_rtds_combined.csv", "sim_rtds_episode.csv", 
Elapsed time:  seconds
 Function:         "sim_rtds_exposure.csv", "sim_rtds_prescription.csv", 
Elapsed time:  seconds
 Function:         "sim_sact_cycle.csv", "sim_sact_drug_detail.csv", "sim_sact_outcome.csv", 
Elapsed time:  seconds
 Function:         "sim_sact_regimen.csv")
Elapsed time:  seconds
 Function:     if (!is.character(dir)) 
Elapsed time:  seconds
 Function:         stop("Please make sure the input dir is a string.")
Elapsed time:  seconds
 Function:     if (!dir.exists(dir)) 
Elapsed time:  seconds
 Function:         stop("Directory does not exist. Please check the path.")
Elapsed time:  seconds
 Function:     all_csv_files <- list.files(dir, pattern = "\\.csv$", full.names = TRUE)
Elapsed time:  seconds
 Function:     available_files <- basename(all_csv_files)
Elapsed time:  seconds
 Function:     missing_files <- setdiff(required_files, available_files)
Elapsed time:  seconds
 Function:     if (length(missing_files) > 0) {
Elapsed time:  seconds
 Function:         stop("Missing required files: ", paste(missing_files, 
Elapsed time:  seconds
 Function:             collapse = ", "))
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     files_to_read <- if (is.null(selected_files)) {
Elapsed time:  seconds
 Function:         all_csv_files[basename(all_csv_files) %in% required_files]
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     else {
Elapsed time:  seconds
 Function:         matched_files <- paste0(selected_files, ".csv")
Elapsed time:  seconds
 Function:         files <- all_csv_files[basename(all_csv_files) %in% matched_files]
Elapsed time:  seconds
 Function:         if (length(files) == 0) 
Elapsed time:  seconds
 Function:             stop("No matching files found for selected files.")
Elapsed time:  seconds
 Function:         files
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     data_list <- pbapply::pblapply(files_to_read, function(file) {
Elapsed time:  seconds
 Function:         table_name <- tools::file_path_sans_ext(basename(file))
Elapsed time:  seconds
 Function:         message(sprintf("Reading: %s", table_name))
Elapsed time:  seconds
 Function:         read.csv(file, stringsAsFactors = FALSE)
Elapsed time:  seconds
 Function:     })
Elapsed time:  seconds
 Function:     names(data_list) <- tools::file_path_sans_ext(basename(files_to_read))
Elapsed time:  seconds
 Function:     message("Files successfully loaded!")
Elapsed time:  seconds
 Function:     return(data_list)
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
Function: function() {
Elapsed time:  seconds
 Function:     required_files <- c("sim_av_gene.csv", "sim_av_patient.csv", 
Elapsed time:  seconds
 Function:         "sim_av_tumour.csv", "sim_rtds_combined.csv", "sim_rtds_episode.csv", 
Elapsed time:  seconds
 Function:         "sim_rtds_exposure.csv", "sim_rtds_prescription.csv", 
Elapsed time:  seconds
 Function:         "sim_sact_cycle.csv", "sim_sact_drug_detail.csv", "sim_sact_outcome.csv", 
Elapsed time:  seconds
 Function:         "sim_sact_regimen.csv")
Elapsed time:  seconds
 Function:     if (!is.character(dir)) 
Elapsed time:  seconds
 Function:         stop("Please make sure the input dir is a string.")
Elapsed time:  seconds
 Function:     if (!dir.exists(dir)) 
Elapsed time:  seconds
 Function:         stop("Directory does not exist. Please check the path.")
Elapsed time:  seconds
 Function:     all_csv_files <- list.files(dir, pattern = "\\.csv$", full.names = TRUE)
Elapsed time:  seconds
 Function:     available_files <- basename(all_csv_files)
Elapsed time:  seconds
 Function:     missing_files <- setdiff(required_files, available_files)
Elapsed time:  seconds
 Function:     if (length(missing_files) > 0) {
Elapsed time:  seconds
 Function:         stop("Missing required files: ", paste(missing_files, 
Elapsed time:  seconds
 Function:             collapse = ", "))
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     files_to_read <- if (is.null(selected_files)) {
Elapsed time:  seconds
 Function:         all_csv_files[basename(all_csv_files) %in% required_files]
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     else {
Elapsed time:  seconds
 Function:         matched_files <- paste0(selected_files, ".csv")
Elapsed time:  seconds
 Function:         files <- all_csv_files[basename(all_csv_files) %in% matched_files]
Elapsed time:  seconds
 Function:         if (length(files) == 0) 
Elapsed time:  seconds
 Function:             stop("No matching files found for selected files.")
Elapsed time:  seconds
 Function:         files
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     data_list <- pbapply::pblapply(files_to_read, function(file) {
Elapsed time:  seconds
 Function:         table_name <- tools::file_path_sans_ext(basename(file))
Elapsed time:  seconds
 Function:         message(sprintf("Reading: %s", table_name))
Elapsed time:  seconds
 Function:         read.csv(file, stringsAsFactors = FALSE)
Elapsed time:  seconds
 Function:     })
Elapsed time:  seconds
 Function:     names(data_list) <- tools::file_path_sans_ext(basename(files_to_read))
Elapsed time:  seconds
 Function:     message("Files successfully loaded!")
Elapsed time:  seconds
 Function:     return(data_list)
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
Function: function() {
Elapsed time:  seconds
 Function:     if (!is.character(query)) 
Elapsed time:  seconds
 Function:         stop("Please make sure input query is a string")
Elapsed time:  seconds
 Function:     keywords <- c("SELECT", "FROM", "WHERE", "INNER", "OUTER", 
Elapsed time:  seconds
 Function:         "JOIN", "RIGHT", "LEFT", "ORDER BY", "GROUP BY", "HAVING")
Elapsed time:  seconds
 Function:     for (keyword in keywords) {
Elapsed time:  seconds
 Function:         query <- gsub(keyword, toupper(keyword), query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     chech_for_where <- grepl("\\bWHERE\\b", query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     if (chech_for_where) {
Elapsed time:  seconds
 Function:         query <- gsub("LIMIT\\s+(\\d+)", "AND ROWNUM <= \\1", 
Elapsed time:  seconds
 Function:             query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     else {
Elapsed time:  seconds
 Function:         query <- gsub("LIMIT\\s+(\\d+)", "WHERE ROWNUM <= \\1", 
Elapsed time:  seconds
 Function:             query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     query <- trimws(query)
Elapsed time:  seconds
 Function:     if (!grepl(";$", query)) {
Elapsed time:  seconds
 Function:         query <- paste0(query, ";")
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     return(query)
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
Function: function() {
Elapsed time:  seconds
 Function:     if (!is.character(query)) 
Elapsed time:  seconds
 Function:         stop("Please make sure input query is a string")
Elapsed time:  seconds
 Function:     keywords <- c("SELECT", "FROM", "WHERE", "INNER", "OUTER", 
Elapsed time:  seconds
 Function:         "JOIN", "RIGHT", "LEFT", "ORDER BY", "GROUP BY", "HAVING")
Elapsed time:  seconds
 Function:     for (keyword in keywords) {
Elapsed time:  seconds
 Function:         query <- gsub(keyword, toupper(keyword), query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     chech_for_where <- grepl("\\bWHERE\\b", query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     if (chech_for_where) {
Elapsed time:  seconds
 Function:         query <- gsub("LIMIT\\s+(\\d+)", "AND ROWNUM <= \\1", 
Elapsed time:  seconds
 Function:             query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     else {
Elapsed time:  seconds
 Function:         query <- gsub("LIMIT\\s+(\\d+)", "WHERE ROWNUM <= \\1", 
Elapsed time:  seconds
 Function:             query, ignore.case = TRUE)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     query <- trimws(query)
Elapsed time:  seconds
 Function:     if (!grepl(";$", query)) {
Elapsed time:  seconds
 Function:         query <- paste0(query, ";")
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     return(query)
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
Function: function() {
Elapsed time:  seconds
 Function:     clean_chunk <- function(chunk) {
Elapsed time:  seconds
 Function:         if (is.null(chunk) || chunk == "") 
Elapsed time:  seconds
 Function:             return("")
Elapsed time:  seconds
 Function:         cleaned_lines <- trimws(strsplit(chunk, "\n")[[1]])
Elapsed time:  seconds
 Function:         cleaned_lines <- cleaned_lines[cleaned_lines != ""]
Elapsed time:  seconds
 Function:         paste(cleaned_lines, collapse = "\n")
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     libraries <- clean_chunk(libraries)
Elapsed time:  seconds
 Function:     query <- clean_chunk(query)
Elapsed time:  seconds
 Function:     data_management <- clean_chunk(data_management)
Elapsed time:  seconds
 Function:     analysis <- clean_chunk(analysis)
Elapsed time:  seconds
 Function:     model_results <- clean_chunk(model_results)
Elapsed time:  seconds
 Function:     if (query != "") {
Elapsed time:  seconds
 Function:         query <- sqlite2oracle(query)
Elapsed time:  seconds
 Function:     }
Elapsed time:  seconds
 Function:     workflow_template <- "\nstart <- Sys.time()\nlog_func(function() {\n# Libraries ----------------------------------------------------------\nlibrary(knitr)\nlibrary(DBI)\nlibrary(odbc)\n{LIBRARIES}\n\n# ODBC --------------------------------------------------------------------\nmy_oracle <- dbConnect(odbc::odbc(),\n                       Driver = \"\",\n                       DBQ = \"\", \n                       UID = \"\",\n                       PWD = \"\",\n                       trusted_connection = TRUE)\n\n# Query ----------------------------------------------------------\nquery1 <- \"{QUERY}\"\ndata <- dbGetQuery(my_oracle, query1)\n\n# Data Management ----------------------------------------------------------\n{DATA_MANAGEMENT}\n\n# Analysis ----------------------------------------------------------\n{ANALYSIS}\n\n# Model Results ----------------------------------------------------------\n{MODEL_RESULTS}\n\nend <- Sys.time()\ncompute_time_limit(start, end)\n  })\n  "
Elapsed time:  seconds
 Function:     workflow_content <- workflow_template
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{LIBRARIES\\}", libraries, workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{QUERY\\}", query, workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{DATA_MANAGEMENT\\}", data_management, 
Elapsed time:  seconds
 Function:         workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{ANALYSIS\\}", analysis, workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\{MODEL_RESULTS\\}", model_results, 
Elapsed time:  seconds
 Function:         workflow_content)
Elapsed time:  seconds
 Function:     workflow_content <- gsub("\\n{3,}", "\n\n", workflow_content)
Elapsed time:  seconds
 Function:     writeLines(workflow_content, file_path)
Elapsed time:  seconds
 Function:     message("Workflow script created at: ", file_path)
Elapsed time:  seconds
 Function:     message("The workflow script is designed for execution on National Health Service (NHS). Local execution of this script is likely to fail due to its dependency on a database connection. The goal of this package is to generate a workflow file compatible with the NHS server environment, which eliminates the need for local database configuration. Assuming successful execution of all local operations, including library imports, data queries, data management procedures, analyses, and file saving, the generated workflow is expected to function correctly within the NHS server environment.")
Elapsed time:  seconds
 Function: }
Elapsed time:  seconds
